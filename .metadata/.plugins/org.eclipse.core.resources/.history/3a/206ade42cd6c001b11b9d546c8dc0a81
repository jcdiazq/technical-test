package com.wolox.challenge;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.wolox.challenge.domain.user.User;

@Component
public class RestExternalRequestImpl<T> implements IRestExternalRequest<T> {
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Value("${rest.external.url}")
	private String URL;
	
	@Autowired
	private IRestExternalRequest<T> obj;
	
	private static final String pathUser = "/users";
	private static final String pathAlmbus = "/albums";
	private static final String pathPhotos = "/photos";
	private static final String pathPosts = "/posts";
	private static final String pathComments = "/comments";
	
	private static final Logger log = LoggerFactory.getLogger(RestExternalRequestImpl.class);
	
	public RestExternalRequestImpl() throws JsonProcessingException {
		// TODO Auto-generated constructor stub
		log.info("Constructor");
		getData(pathUser);
	}
	
	//@Bean
	public void getData(String path) throws JsonProcessingException {
		ResponseEntity<?> users = restTemplate.getForEntity(URL.concat(path), obj.getClass());
		Object[] usersArray = (Object[]) users.getBody();
		for (Object obj : usersArray) {
			ObjectMapper objectMapper = new ObjectMapper();
			String json = objectMapper.writeValueAsString(obj);
			log.info(json);
			//log.info(user.toString());
		}
	}
	
	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
		return builder.build();
	}
}
